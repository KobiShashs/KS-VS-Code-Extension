{
    "Run Time Code": {
		"prefix": "ksj-RunTimeCode",
		"body": [
			"long startTime = System.nanoTime();",
            "// Some code here...",
            "long endTime = System.nanoTime();",
            "calcExecutionTime(startTime, endTime);"
		],
		"description": "Code to use run time method"
        },
        
    "Application properties mysql configuration code": {
        "prefix": "ksa-MySqlConfiguration",
        "body": [
            "#Copy and Paste this entire code to application.properties file!",
            "#JDBC With MySQL",
            "spring.datasource.url=jdbc:mysql://localhost:3306/example?serverTimezone=IST",
            "spring.datasource.username=user",
            "spring.datasource.password=1234",
            "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver",
            "#Hibernate with MySQL Dialect",
            "spring.jpa.hibernate.ddl-auto=update",
            "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect",
            "spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true"
        ],
        "description": "Application properties mysql configuration code"
        },

        "Method to check code run time": {
            "prefix": "ksj-RunTimeMethod",
            "body": [
              "public static void calcExecutionTime(long startTime, long endTime) {",
              "double totalTime = endTime - startTime;",
              "",
              "// Print NanoSeconds",
              "if (totalTime < 1000) {",
              "System.out.printf(\"Execution time: %.0f nanoseconds.\", totalTime);",
              "}",
              "// Convert NanoSeconds to MicroSeconds",
              "else if (totalTime / 1000 < 1000) {",
              "System.out.printf(\"Execution time: %.3f microseconds.\", totalTime / 1000);",
              "}",
              "// Convert MicroSeconds to MilliSeconds",
              "else if (totalTime / 1000000 < 1000) {",
              "System.out.printf(\"Execution time: %.3f milliseconds.\", totalTime / 1000000);",
              "}",
              "// Convert MilliSeconds to seconds",
              "else {",
              "System.out.printf(\"Execution time: %.3f seconds.\", totalTime / 1000000000);",
              "}",
              "}"
            ],
            "description": "Method to check code run time"
          },

          "Singleton class thread safe example": {
            "prefix": "ksj-SingletonClass",
            "body": [
              "public class JohnBryceSingleton {",
              "// Step 01",
              "private static JohnBryceSingleton instance = null;",
              "private String name;",
              "private String phone;",
              "private String address;",
              "",
              "// Step 02",
              "private JohnBryceSingleton() {",
              "System.out.println(\"CTOR IN ACTION\");",
              "}",
              "",
              "private JohnBryceSingleton(String phone, String address) {",
              "System.out.println(\"CTOR IN ACTION\");",
              "this.phone = phone;",
              "this.address = address;",
              "}",
              "",
              "// Step 03",
              "public static JohnBryceSingleton getInstance() {",
              "if (instance == null) {",
              "synchronized (JohnBryceSingleton.class) {",
              "if (instance == null) {",
              "instance = new JohnBryceSingleton();",
              "}",
              "}",
              "}",
              "return instance;",
              "}",
              "",
              "public String getName() {",
              "return name;",
              "}",
              "",
              "public void setName(String name) {",
              "this.name = name;",
              "}",
              "",
              "public String getPhone() {",
              "return phone;",
              "}",
              "",
              "public void setPhone(String phone) {",
              "this.phone = phone;",
              "}",
              "",
              "public String getAddress() {",
              "return address;",
              "}",
              "",
              "public void setAddress(String address) {",
              "this.address = address;",
              "}",
              "",
              "@Override",
              "public String toString() {",
              "return getClass().getName() + \" {\\n\\tname: \" + name + \"\\n\\tphone: \" + phone + \"\\n\\taddress: \" + address + \"\\n}\";",
              "}",
              "}"
            ],
            "description": "Singleton class thread safe example"
          },

          "Spring main class initialization": {
            "prefix": "kss-SpringMain",
            "body": [
              "ApplicationContext ctx = SpringApplication.run(SpringDataApplication.class, args);",
              "System.out.println(\"Spring Server is running!\");"
            ],
            "description": "Spring main class initialization"
          },

          "Swagger class initialization": {
            "prefix": "kss-SwaggerClass",
            "body": [
              "import org.springframework.context.annotation.Bean;",
              "import org.springframework.context.annotation.Configuration;",
              "",
              "import springfox.documentation.builders.PathSelectors;",
              "import springfox.documentation.builders.RequestHandlerSelectors;",
              "import springfox.documentation.spi.DocumentationType;",
              "import springfox.documentation.spring.web.plugins.Docket;",
              "import springfox.documentation.swagger2.annotations.EnableSwagger2;",
              "",
              "@Configuration",
              "@EnableSwagger2",
              "// http://localhost:8080/swagger-ui.html ",
              "public class SwaggerConfiguration {",
              "@Bean",
              "public Docket api() { ",
              "return new Docket(DocumentationType.SWAGGER_2)  ",
              ".select()                                  ",
              ".apis(RequestHandlerSelectors.any())              ",
              ".paths(PathSelectors.any())                          ",
              ".build();                                           ",
              "}",
              "}"
            ],
            "description": "Swagger class initialization"
          },

          "User controller class initialization": {
            "prefix": "kss-UserController",
            "body": [
              "import java.util.List;",
              "",
              "import org.springframework.beans.factory.annotation.Autowired;",
              "import org.springframework.web.bind.annotation.DeleteMapping;",
              "import org.springframework.web.bind.annotation.GetMapping;",
              "import org.springframework.web.bind.annotation.PathVariable;",
              "import org.springframework.web.bind.annotation.RequestMapping;",
              "import org.springframework.web.bind.annotation.RequestParam;",
              "import org.springframework.web.bind.annotation.RestController;",
              "",
              "@RestController",
              "@RequestMapping(\"/user/\")",
              "public class UserController {",
              "@Autowired",
              "private UserService service;",
              "",
              "// http://localhost:8080/user/getUserByProfession/NodeJS",
              "@GetMapping(\"/getUsers\")",
              "public List<User> getAllUsers() {",
              "return service.getUsers();",
              "}",
              "",
              "// http://localhost:8080/user/getUserByProfession/Java",
              "// http://localhost:8080/user/getUserByProfession/NodeJS",
              "@GetMapping(\"/getUserByProfession/{profession}\")",
              "public List<User> getUserByProfession(@PathVariable String profession) {",
              "return service.getUserByProfession(profession);",
              "}",
              "",
              "// http://localhost:8080/user/getUserCount/31",
              "@GetMapping(\"/getUserCount/{age}\")",
              "public String getCountByAge(@PathVariable int age) {",
              "long count = service.getCounts(age);",
              "return \"total no of records : \" + count;",
              "}",
              "",
              "// Postman -localhost:8080/user/delete/Moshe",
              "@DeleteMapping(\"/delete/{name}\")",
              "public List<User> deleteUser(@PathVariable String name) {",
              "return service.deleteUser(name);",
              "}",
              "",
              "// http://localhost:8080/user/findMultiCondition/Java/31",
              "@GetMapping(\"/findMultiCondition/{profession}/{age}\")",
              "public List<User> getUsersByProfessionAndAge(@PathVariable String profession, @PathVariable int age) {",
              "return service.findByMultiCondition(profession, age);",
              "}",
              "",
              "// http://localhost:8080/user/getUsersIgnoreCase?profession=JAva",
              "@GetMapping(\"/getUsersIgnoreCase\")",
              "public List<User> getUsersByprofession(@RequestParam(\"profession\") String profession) {",
              "return service.getUsersIgnoreCase(profession);",
              "}",
              "",
              "@GetMapping(\"/getRecordsByCustomQuery\")",
              "public List<User> getUsersByCustomQuery() {",
              "return service.getUsersCustomQuery();",
              "}",
              "}",
              ""
            ],
            "description": "User controller class initialization"
          },

          "User repository class initialization": {
            "prefix": "kss-UserRepository",
            "body": [
              "import java.util.List;",
              "",
              "import org.springframework.data.jpa.repository.JpaRepository;",
              "import org.springframework.data.jpa.repository.Query;",
              "",
              "public interface UserRepository extends JpaRepository<User, Long> {",
              "",
              "public List<User> findByProfession(String profession);",
              "",
              "public long countByAge(int age);",
              "",
              "public List<User> deleteByName(String name);",
              "",
              "// Multi condition",
              "public List<User> findByProfessionAndAge(String profession, int age);",
              "",
              "// Ignore case",
              "public List<User> findByProfessionIgnoreCase(String profession);",
              "",
              "// Custome Query",
              "@Query(\"select u from User u\")",
              "public List<User> getUsersCustomQuery();",
              "}",
              ""
            ],
            "description": "User repository class initialization"
          },

          "User service class initialization": {
            "prefix": "kss-UserService",
            "body": [
              "import java.util.ArrayList;",
              "import java.util.List;",
              "",
              "import javax.annotation.PostConstruct;",
              "import javax.transaction.Transactional;",
              "",
              "import org.springframework.beans.factory.annotation.Autowired;",
              "import org.springframework.stereotype.Service;",
              "",
              "@Service",
              "@Transactional",
              "public class UserService {",
              "@Autowired",
              "private UserRepository repository;",
              "",
              "@PostConstruct",
              "public void initDB() {",
              "repository.deleteAll();",
              "List<User> users = new ArrayList<>();",
              "users.add(new User(123, \"Kobi\", \"Java\", 31));",
              "users.add(new User(201, \"Moshe\", \"Java\", 24));",
              "users.add(new User(201, \"Dina\", \"NodeJS\", 29));",
              "users.add(new User(201, \"Adi\", \"Java\", 45));",
              "repository.saveAll(users);",
              "}",
              "",
              "public List<User> getUsers() {",
              "return repository.findAll();",
              "}",
              "",
              "public List<User> getUserByProfession(String profession) {",
              "return repository.findByProfession(profession);",
              "}",
              "",
              "public long getCounts(int age) {",
              "return repository.countByAge(age);",
              "}",
              "",
              "public List<User> deleteUser(String name) {",
              "return repository.deleteByName(name);",
              "}",
              "",
              "public List<User> findByMultiCondition(String profession, int age) {",
              "return repository.findByProfessionAndAge(profession, age);",
              "}",
              "",
              "public List<User> getUsersIgnoreCase(String profession) {",
              "return repository.findByProfessionIgnoreCase(profession);",
              "}",
              "",
              "// Custom Query",
              "public List<User> getUsersCustomQuery() {",
              "return repository.getUsersCustomQuery();",
              "}",
              "}",
              ""
            ],
            "description": "User service class initialization"
          },

          "User table (bean class) initialization": {
            "prefix": "kss-UserTable",
            "body": [
              "import javax.persistence.Column;",
              "import javax.persistence.Entity;",
              "import javax.persistence.GeneratedValue;",
              "import javax.persistence.GenerationType;",
              "import javax.persistence.Id;",
              "import javax.persistence.Table;",
              "",
              "@Entity",
              "@Table",
              "public class User {",
              "private long id;",
              "private String name;",
              "private String profession;",
              "private int age;",
              "",
              "public User() {",
              "// TODO Auto-generated constructor stub",
              "}",
              "",
              "public User(long id, String name, String profession, int age) {",
              "this.id = id;",
              "this.name = name;",
              "this.profession = profession;",
              "this.age = age;",
              "}",
              "",
              "@Id",
              "@GeneratedValue(strategy=GenerationType.AUTO)",
              "public long getId() {",
              "return id;",
              "}",
              "",
              "public void setId(long id) {",
              "this.id = id;",
              "}",
              "",
              "@Column",
              "public String getName() {",
              "return name;",
              "}",
              "",
              "public void setName(String name) {",
              "this.name = name;",
              "}",
              "",
              "@Column",
              "public String getProfession() {",
              "return profession;",
              "}",
              "",
              "public void setProfession(String profession) {",
              "this.profession = profession;",
              "}",
              "",
              "@Column",
              "public int getAge() {",
              "return age;",
              "}",
              "",
              "public void setAge(int age) {",
              "this.age = age;",
              "}",
              "",
              "@Override",
              "public String toString() {",
              "return getClass().getName() + \" {\\n\\tid: \" + id + \"\\n\\tname: \" + name + \"\\n\\tprofession: \" + profession",
              "+ \"\\n\\tage: \" + age + \"\\n}\";",
              "}",
              "}",
              ""
            ],
            "description": "User table (bean class) initialization"
          }


}